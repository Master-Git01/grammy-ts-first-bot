"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const grammy_1 = require("grammy");
const bot = new grammy_1.Bot(process.env.BOT_TOKEN || "");
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
bot.command("start", async (ctx) => {
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ Test App üëã
üöÄ –ü–æ–ª—É—á–∏—Ç–µ —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ —á–∏—Å–ª–æ –≤ –º–∏—Ä–µ! –¢–æ–ª—å–∫–æ —É –Ω–∞—Å!`, {
        reply_markup: new grammy_1.Keyboard()
            .webApp("–û—Ç–∫—Ä—ã—Ç—å Test App", process.env.WEBAPP_URL || "") // –ö–Ω–æ–ø–∫–∞ Mini App
            .resized(), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    });
});
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ Mini App
bot.on("message:web_app_data", async (ctx) => {
    try {
        const data = JSON.parse(ctx.message.web_app_data.data);
        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.userName},
–í–∞—à–µ —á–∏—Å–ª–æ: ${data.result}`);
    }
    catch (error) {
        await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App.");
    }
});
bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof grammy_1.GrammyError) {
        console.error("Error in request:", e.description);
    }
    else if (e instanceof grammy_1.HttpError) {
        console.error("Could not contact Telegram:", e);
    }
    else {
        console.error("Unknown error:", e);
    }
});
// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.start();
